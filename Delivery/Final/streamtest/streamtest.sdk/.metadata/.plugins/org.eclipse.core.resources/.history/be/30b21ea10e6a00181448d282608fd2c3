/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "platform.h"
#include "xstatus.h"
#include "xgpio_l.h"
#include "xintc_l.h"
#include "xil_exception.h"
#include "xparameters.h"
#include "xuartlite.h"

#define INTC_BASEADDR			XPAR_INTC_0_BASEADDR
#define INTC_DEVICE_ID			XPAR_INTC_0_DEVICE_ID
#define FIT_TIMER_0_INT_ID		XPAR_AXI_INTC_0_FIT_TIMER_0_INTERRUPT_INTR
#define FIT_TIMER_0_INT_MASK	XPAR_FIT_TIMER_0_INTERRUPT_MASK
#define PUSH_BUT_INT_ID			XPAR_AXI_INTC_0_AXI_GPIO_PUSH_BUT_IP2INTC_IRPT_INTR
#define PUSH_BUT_INT_MASK		XPAR_AXI_GPIO_PUSH_BUT_IP2INTC_IRPT_MASK

#define NUM_PIECES 16

//-------------------------------------------------------------------------------------------

struct piece
{
	int num; // piece number 0-7
	char color; // 0-black 1-white
	char hidden; // 0-showing 1-hidden

};

int top;
int p1idx, p2idx;
int BW;
int displays[8] = {9,9,9,9,9,9,9,9};
int color[8] 	= {0,0,0,0,0,0,0,0};

int switches = 0;
int showOp = 0;

int stopHammerTime = 1;
//-------------------------------------------------------------------------------------------

// Counter static variable
static unsigned int userCount = 0;

// BCD to segments conversion LUT
unsigned char disp7SegMapTableBlack[10] = {0x40, 0x79, 0x24, 0x30, 0x19,
									  0x12, 0x02, 0x78, 0x00, 0xBF};
unsigned char disp7SegMapTableWhite[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99,
									  0x92, 0x82, 0xF8, 0x80, 0x3F};

//----- FUNCTIONS ---------------------------------------------------------------------------
// randomize all pieces in the deck
void shuffle(struct piece deck[], size_t n ){
	srand( 2 );

	for (int i = n; i > 0; i--)
	{
		// random index
		int j = rand() % (i+1);
		// swap pieces
		struct piece tmp = deck[i];
		deck[i] = deck[j];
		deck[j] = tmp;
	}
}

// compare 2 pieces by value and color B < W
int compare(struct piece p1, struct piece p2){

	if(p1.num == p2.num){
		if(p1.color)
			return 1;
		else
			return 0;
	}else{
		return p1.num > p2.num;
	}
}

void swap(struct piece *xp, struct piece *yp)
{
	struct piece temp = *xp;
    *xp = *yp;
    *yp = temp;
}

// A function to implement bubble sort
void bubbleSort(struct piece arr[], int n)
{
   int i, j;
   for (i = 0; i < n-1; i++)

       // Last i elements are already in place
       for (j = 0; j < n-i-1; j++)
           if (compare(arr[j],arr[j+1]))
              swap(&arr[j], &arr[j+1]);
}

int searchPiece(struct piece drawPiece, struct piece player[], int n){
	for (int i = 0; i < n; ++i)
	{
		if(player[i].num == drawPiece.num && player[i].color == drawPiece.color)
			return i;
	}
	return -1;
}

int didIWin(struct piece player[], size_t n){
	for (int i = 0; i < n; ++i)
	{
		if(player[i].num < 9){
			if(player[i].hidden)
				return 0;
		}
	}
	return 1;
}

// remove a piece from the deck
struct piece pop(struct piece deck[]){
	struct piece ret = {9,0,1};
	if(top == -1){
		xil_printf("Deck is empty\n");
	}else{
		ret = deck[top];
		top--;
	}
	return ret;
}

void printDeck(struct piece deck[], size_t n){
	for (int i = 0; i < n; ++i)
	{
		if(deck[i].num < 9){
			if (deck[i].color){
				xil_printf("W ");
			}else{
				xil_printf("B ");
			}
			xil_printf("%d", deck[i].num);
			if(!deck[i].hidden)
			{
				xil_printf("*");
			}
			xil_printf("\n");
		}
	}
	xil_printf("\n");
}

void printHand(struct piece player[], size_t n, int showHidden){
	xil_printf(" idx: ");
	for (int i = 0; i < n; ++i)
	{
		if(player[i].num < 9){
			xil_printf("  %d   ", i);
		}
	}
	xil_printf("\nhand: ");
	for (int i = 0; i < n; ++i)
	{
		if(player[i].num < 9){
			if (player[i].color){
				xil_printf("W ");
			}else{
				xil_printf("B ");
			}
			if(showHidden){
				xil_printf("%d | ", player[i].num);
			}
			else{
				if(player[i].hidden)
					xil_printf("X | ");
				else
					xil_printf("%d | ", player[i].num);
			}
		}
	}
	xil_printf("\n");
}

void showHand(struct piece player[], size_t n, int showHidden){
	for (int i = 0; i < n; ++i)
	{
		if(player[i].num < 9){
			color[i] = player[i].color;
			if(showHidden){
				displays[i] = player[i].num;
			}
			else{
				if(player[i].hidden)
					displays[i] = 9;
				else
					displays[i] = player[i].num;
			}
		}
	}
}

//----- FUNCTIONS ---------------------------------------------------------------------------

void TimerIntCallbackHandler(void *CallbackRef) // Will be called at every timer output event
{

	static int refFlag = 0;
	unsigned int digit;
	unsigned int enableMask;

	switch (refFlag)  // Refresh the units or the tenths displays at 500 Hz (each)
	{
		case 0 :
		{
			digit 	= displays[0];
			BW = color[0];
			enableMask = 0xFE;
			refFlag = 1;
			break;
		}
		case 1 :
		{
			digit = displays[1];
			BW = color[1];
			enableMask = 0xFD;
			refFlag = 2;
			break;
		}
		case 2 :
		{
			digit = displays[2];
			BW = color[2];
			enableMask = 0xFB;
			refFlag = 3;
			break;
		}
		case 3 :
		{
			digit = displays[3];
			BW = color[3];
			enableMask = 0xF7;
			refFlag = 4;
			break;
		}
		case 4 :
		{
			digit = displays[4];
			BW = color[4];
			enableMask = 0xEF;
			refFlag = 5;
			break;
		}
		case 5 :
		{
			digit = displays[5];
			BW = color[5];
			enableMask = 0xDF;
			refFlag = 6;
			break;
		}
		case 6 :
		{
			digit = displays[6];
			BW = color[6];
			enableMask = 0xBF;
			refFlag = 7;
			break;
		}
		case 7 :
		{
			digit = displays[7];
			BW = color[7];
			enableMask = 0x7F;
			refFlag = 0;
			break;
		}

	}

	XGpio_WriteReg(XPAR_AXI_GPIO_DISP_AN_BASEADDR, XGPIO_DATA_OFFSET, enableMask);
	if(!BW){
		XGpio_WriteReg(XPAR_AXI_GPIO_DISP_SEG_BASEADDR, XGPIO_DATA_OFFSET, disp7SegMapTableBlack[digit]);
	}else{
		XGpio_WriteReg(XPAR_AXI_GPIO_DISP_SEG_BASEADDR, XGPIO_DATA_OFFSET, disp7SegMapTableWhite[digit]);
	}

	switches = XGpio_ReadReg(XPAR_AXI_GPIO_SW_BASEADDR, XGPIO_DATA_OFFSET);

}

void PushButIntCallbackHandler(void *CallbackRef) // Will be called whenever a button is pressed
{
	userCount = 0;
	stopHammerTime = 0;
	/*
	 * Clear interrupt status (in service) bit at push buttons GPIO
	 */
	XGpio_WriteReg(XPAR_AXI_GPIO_PUSH_BUT_BASEADDR, XGPIO_ISR_OFFSET, XGPIO_IR_CH1_MASK);
}

int SetupInterrupts(u32 IntcBaseAddress)
{
	/*
	 * Connect a callback handler that will be called when an interrupt for the timer occurs,
	 * to perform the specific interrupt processing for the timer.
	 */
	XIntc_RegisterHandler(IntcBaseAddress, FIT_TIMER_0_INT_ID,
						  (XInterruptHandler)TimerIntCallbackHandler, (void *)0);

	/*
	 * Enable interrupts at the push buttons GPIO
	 */
	XGpio_WriteReg(XPAR_AXI_GPIO_PUSH_BUT_BASEADDR, XGPIO_IER_OFFSET, XGPIO_IR_CH1_MASK);
	XGpio_WriteReg(XPAR_AXI_GPIO_PUSH_BUT_BASEADDR, XGPIO_GIE_OFFSET, XGPIO_GIE_GINTR_ENABLE_MASK);

	/*
	 * Connect a callback handler that will be called when an interrupt for the push buttons
	 * GPIO occurs, to perform the specific interrupt processing for the input port.
	 */
	XIntc_RegisterHandler(IntcBaseAddress, PUSH_BUT_INT_ID,
						  (XInterruptHandler)PushButIntCallbackHandler, (void *)0);

	/*
	 * Enable interrupts for all devices that cause interrupts, and enable
	 * the INTC master enable bit.
	 */
	XIntc_EnableIntr(IntcBaseAddress, FIT_TIMER_0_INT_MASK | PUSH_BUT_INT_MASK);

	/*
	 * Set the master enable bit.
	 */
	XIntc_Out32(IntcBaseAddress + XIN_MER_OFFSET, XIN_INT_HARDWARE_ENABLE_MASK |
												  XIN_INT_MASTER_ENABLE_MASK);

	/*
	 * This step is processor specific, connect the handler for the
	 * interrupt controller to the interrupt source for the processor.
	 */
	Xil_ExceptionInit();

	/*
	 * Register the interrupt controller handler with the exception table.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
								 (Xil_ExceptionHandler)XIntc_DeviceInterruptHandler,
								 INTC_DEVICE_ID);

	/*
	 * Enable exceptions.
	 */
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}

//----- MAIN --------------------------------------------------------------------------------
int main()
{
	int status;

	init_platform();

	xil_printf("Welcome to basic I/O, Timer and IRQ demo\n\r");

	/*
	 * Enable output ports tri-state buffers
	 */
    XGpio_WriteReg(XPAR_AXI_GPIO_LED_BASEADDR, XGPIO_TRI_OFFSET, 0);
    XGpio_WriteReg(XPAR_AXI_GPIO_DISP_SEG_BASEADDR, XGPIO_TRI_OFFSET, 0);
    XGpio_WriteReg(XPAR_AXI_GPIO_DISP_AN_BASEADDR, XGPIO_TRI_OFFSET, 0);

	/*
	 * Run the low level example of Interrupt Controller, specify the Base
	 * Address generated in xparameters.h.
	 */
	status = SetupInterrupts(INTC_BASEADDR);
	if (status != XST_SUCCESS) {
		xil_printf("Setup interrupts failed\r\n");
		cleanup_platform();
		return XST_FAILURE;
	}

	xil_printf("Setup interrupts successful\r\n");

	xil_printf("System running\r\n");

	// player 1 hand
	struct piece player1[8] = {
		{9, 0, 1},
		{9, 0, 1},
		{9, 0, 1},
		{9, 0, 1},
		{9, 0, 1},
		{9, 0, 1},
		{9, 0, 1},
		{9, 0, 1}
	};
	// player 2 hand
	struct piece player2[8] = {
		{9, 0, 1},
		{9, 0, 1},
		{9, 0, 1},
		{9, 0, 1},
		{9, 0, 1},
		{9, 0, 1},
		{9, 0, 1},
		{9, 0, 1}
	};

	// initialize all pieces as hidden
	struct piece deck[NUM_PIECES] = {
		// black pieces
		{0, 0, 1},
		{1, 0, 1},
		{2, 0, 1},
		{3, 0, 1},
		{4, 0, 1},
		{5, 0, 1},
		{6, 0, 1},
		{7, 0, 1},
		// white pieces
		{0, 1, 1},
		{1, 1, 1},
		{2, 1, 1},
		{3, 1, 1},
		{4, 1, 1},
		{5, 1, 1},
		{6, 1, 1},
		{7, 1, 1}
	};

	// 1 - player1 Turn
	// 0 - player2 Turn
	int playerTurn = 1;

	// start game
	top = NUM_PIECES-1;
	shuffle(deck, NUM_PIECES-1);
	xil_printf("Shuffled\n");
	printDeck(deck, NUM_PIECES);

	// deal hand for both players
	for (int i = 0; i < 3; ++i)
	{
		player1[i] = pop(deck);
		p1idx = i+1;
		player2[i] = pop(deck);
		p2idx = i+1;
	}

	//xil_printf("player 1\n");
	bubbleSort(player1, NUM_PIECES/2);
	//printDeck(player1, NUM_PIECES/2);

	//xil_printf("player 2\n");
	bubbleSort(player2, NUM_PIECES/2);
	//printDeck(player2, NUM_PIECES/2);

	char choice = 'n';
	struct piece drawPiece;

    while (1)
    {
    	char tmp;

    	// show player hand
    	printHand(playerTurn ? player1 : player2, NUM_PIECES/2, 1);
    	//showHand(playerTurn ? player1 : player2, NUM_PIECES/2, 1);


		/*for (int i = 0; i < 10; ++i)
		{
			xil_printf("\n");
		}
		xil_printf("%7c --- player%d Turn --- %7c\n",' ', playerTurn ? 1 : 2 ,' ');*/
		if(choice == 'n' || choice == 'N')
		{
			//xil_printf("Ready Player %d?\nPress Enter to start.\n",(playerTurn ? 1 : 2));
			//scanf("%c",&tmp);
			//xil_printf("Drawing for player%d\n", playerTurn ? 1 : 2);
			drawPiece = pop(deck);
			//xil_printf("Piece %c %d \n\n", drawPiece.color ? 'W' : 'B', drawPiece.num);
			if(playerTurn)
			{
				player1[p1idx] = drawPiece;
				p1idx++;
				bubbleSort(player1, NUM_PIECES/2);
			}else{
				player2[p2idx] = drawPiece;
				p2idx++;
				bubbleSort(player2, NUM_PIECES/2);
			}
		}
		//xil_printf("Your Hand:\n");
		//printHand(playerTurn ? player1 : player2, NUM_PIECES/2, 1);

		//xil_printf("Opponent hand:\n");
		//printHand(playerTurn ? player2 : player1, NUM_PIECES/2, 0);

		int idx, val;
		xil_printf("Guess a Piece!\r\n");
		xil_printf("Index: \r\n");
		//cin >> idx;
		idx = XUartLite_RecvByte(XPAR_AXI_UARTLITE_0_BASEADDR) - 48;
		XUartLite_SendByte(XPAR_AXI_UARTLITE_0_BASEADDR,idx);
		xil_printf("Index: %x\r\n", idx);

		xil_printf("Value: \r\n");
		val = XUartLite_RecvByte(XPAR_AXI_UARTLITE_0_BASEADDR) - 48;
		XUartLite_SendByte(XPAR_AXI_UARTLITE_0_BASEADDR,val);
		xil_printf("val: %x\r\n", val);

		while(stopHammerTime){
			if(switches==0x8000){
				showHand(playerTurn ? player2 : player1, NUM_PIECES/2, 0);
			}
			else{
				showHand(playerTurn ? player1 : player2, NUM_PIECES/2, 1);
			}

		}
		stopHammerTime = 1;

		if ((playerTurn ? player2 : player1)[idx].num == val){
			// correct answer
			//xil_printf("correct!\n");
			// show opponent piece
			(playerTurn ? player2 : player1)[idx].hidden = 0;

			// WIN CONDITION
			if(didIWin( (playerTurn ? player2 : player1), NUM_PIECES/2) ){
				//xil_printf("Congratulations You Have Won Player %d!\n", (playerTurn ? 1 : 2));
				break;
			}

			// try another guess
			//xil_printf("Do you want to try another guess(y/n)?\n");
			//cin >> choice;
			//scanf("%c",&tmp);
			if(choice == 'n' || choice == 'N')
				playerTurn = playerTurn ^ 1;
		}
		else{
			// wrong answer
			//xil_printf("failed!\n");
			// search for draw piece and make it visible
			idx = searchPiece(drawPiece, playerTurn ? player1 : player2, NUM_PIECES/2);
			(playerTurn ? player1 : player2)[idx].hidden = 0;
			choice = 'n';
			playerTurn = playerTurn ^ 1;
		}
    	/*
    	 * Infinite loopback switches to LEDs
    	 */
    	XGpio_WriteReg(XPAR_AXI_GPIO_LED_BASEADDR, XGPIO_DATA_OFFSET,
        			   XGpio_ReadReg(XPAR_AXI_GPIO_SW_BASEADDR, XGPIO_DATA_OFFSET));
    }

    cleanup_platform();
    return 0;
}



