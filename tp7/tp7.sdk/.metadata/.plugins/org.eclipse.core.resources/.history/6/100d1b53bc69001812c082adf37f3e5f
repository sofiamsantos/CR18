/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xstatus.h"
#include "xgpio_l.h"
#include "xintc_l.h"
#include "xil_exception.h"
#include "xparameters.h"


#define DISPLAY_MASK 0
#define DOT_ENABLE 1
#define DIGIT_VALUES 2
#define REFRESH_RATE 3
#define DISPLAY_BRIGHTNESS 4


int main()
{
    init_platform();

    print("Hello World\n\r");

    unsigned int enableDisplayMask;

    char d0;
    char d1;
    char d2;
    char d3;

    // Configures sw as input
    XGpio_WriteReg(XPAR_AXI_GPIO_SW_BASEADDR, XGPIO_TRI_OFFSET, 1);
    // configure led as output
    XGpio_WriteReg(XPAR_AXI_GPIO_LED_BASEADDR, XGPIO_TRI_OFFSET, 0);
    // configure btn as input
    XGpio_WriteReg(XPAR_AXI_GPIO_BTN_BASEADDR, XGPIO_TRI_OFFSET, 1);

    while(1)
    {
    	// Read values from switches
    	enableDisplayMask = XGpio_ReadReg(XPAR_AXI_GPIO_SW_BASEADDR, XGPIO_DATA_OFFSET);
    	xil_printf("DISPLAY MASK = %d\r\n", enableDisplayMask);
    	// xil_printf("DOT MASK = %d\r\n",  enableDisplayMask >> 8);

    	// set enables displays
    	//Xil_Out32(XPAR_SEVENDISPMANAGER_0_S00_AXI_BASEADDR + DISPLAY_MASK *4 , enableDisplayMask);

    	xil_printf("VALUE IN SLAVE_0 = %d\r\n",  Xil_In32(XPAR_SEVENDISPMANAGER_0_S00_AXI_BASEADDR + DISPLAY_MASK *4));
    	// set dot enables
    	//Xil_Out32(XPAR_SEVENDISPMANAGER_0_S00_AXI_BASEADDR + DOT_ENABLE *4 , enableDisplayMask >> 8);

    	Xil_Out32(XPAR_SEVENDISPMANAGER_0_S00_AXI_BASEADDR + DIGIT_VALUES *4, 5);
    }

    //XGpio_WriteReg(XPAR_AXI_GPIO_7SEG_DISP_AN_BASEADDR, XGPIO_DATA_OFFSET, enableMask);



    cleanup_platform();
    return 0;
}
